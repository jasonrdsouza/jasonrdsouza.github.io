<h2 id="general">General</h2>
<h3 id="check-network-utilization">Check Network Utilization</h3>
<pre><code class="language-bash">sudo iftop -B
</code></pre>
<h3 id="process-substitution">Process Substitution</h3>
<p>Creating a named pipe is done in <a href="https://fishshell.com/">fish</a> with the <code>psub</code> command as follows:</p>
<pre><code>diff (sort a.txt | psub) (sort b.txt | psub)
</code></pre>
<p>References: <code>man psub</code></p>
<h3 id="extract-and-pretty-print-stack-trace-from-logback-logs">Extract and Pretty Print Stack Trace from Logback Logs</h3>
<pre><code class="language-bash">cat tmp | jq &quot;.stack_trace&quot; | xargs printf
</code></pre>
<h2 id="less">Less</h2>
<p>Tips and tricks with less</p>
<h3 id="display-ansi-color-codes">Display ANSI color codes</h3>
<pre><code class="language-bash">less -R
</code></pre>
<h3 id="display-line-numbers">Display Line Numbers</h3>
<pre><code class="language-bash">less -N
</code></pre>
<p>All these less commands can be passed in as args, or when already in less.
Also, some of the search and movement syntax of vim works in less as well.</p>
<h2 id="tcpdump">Tcpdump</h2>
<h3 id="direct-usage">Direct Usage</h3>
<p>To make the output legible, as well as manageable, make sure to</p>
<ol>
<li>specify the port you care about</li>
<li>use the -XX and -i flags to get ascii output next to the binary</li>
</ol>
<pre><code class="language-bash">sudo tcpdump -XX -i eth0 port 44380 &gt; /tmp/dump
</code></pre>
<h3 id="pretty-print-pcap-file">Pretty Print PCAP file</h3>
<p>If you have an existing PCAP file (for example, from <a href="https://www.wireshark.org/">wireshark</a>), you can run it through tcpdump to pretty print the contents as follows:</p>
<pre><code class="language-bash">tcpdump -qns 0 -X -r file.pcap
</code></pre>
<h2 id="find">Find</h2>
<h3 id="list-files-with-specific-extension-and-perform-command-on-them">List files with specific extension and perform command on them</h3>
<pre><code class="language-bash"># In this case, list video files and for each one, extract metadata
find . -type f \( -iname \*.mkv -o -iname \*.mp4 -o -iname \*.avi \) -print0 | while IFS= read -r -d '' file; do
  ffprobe -v quiet -print_format json -show_format -show_streams $file;
done &gt; ~/video_metadata.json
</code></pre>
