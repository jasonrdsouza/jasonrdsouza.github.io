{"title":"Vim Spells","tags":["vi","vim"],"template":"spell.mustache","CORK_url":"spells/vim.html","CORK_reading_time":4,"CORK_lix_readability_score":33,"CORK_ari_readability_score":8,"content":"<h2 id=\"movement\">Movement</h2>\n<ul>\n<li><code>zz</code> move the current line to the middle of the screen</li>\n<li><code>w</code> go to the next word</li>\n<li><code>b</code> go to the previous word</li>\n<li><code>e</code> go to the end of the word</li>\n<li><code>W/B/E</code> same as above, but only treats whitespace as a separator</li>\n<li><code>H</code> go to the first line of current screen.</li>\n<li><code>M</code> go to the middle line of current screen.</li>\n<li><code>L</code> go to the last line of current screen.</li>\n<li><code>CTRL-f</code> jump forward one full screen.</li>\n<li><code>CTRL-b</code> jump backwards one full screen</li>\n<li><code>CTRL-d</code> jump forward (down) a half screen</li>\n<li><code>CTRL-u</code> jump back (up) one half screen</li>\n</ul>\n<h2 id=\"spacing\">Spacing</h2>\n<h3 id=\"convert-tabs-to-spaces\">Convert tabs to spaces</h3>\n<p><em>assumes <code>expandtab</code> is on</em></p>\n<pre><code class=\"language-vim\">:retab\n</code></pre>\n<h3 id=\"strip-trailing-whitespace\">Strip trailing whitespace</h3>\n<pre><code class=\"language-vim\">:%s/\\s\\+$//e\n</code></pre>\n<h2 id=\"buffers\">Buffers</h2>\n<p>Close all open buffers</p>\n<pre><code class=\"language-vim\">:%bd\n</code></pre>\n<h2 id=\"splits\">Splits</h2>\n<p>Creating them</p>\n<pre><code class=\"language-vim\">:sp (horizontal split)\n:vsp (vertical split)\n</code></pre>\n<p>Jumping around them</p>\n<pre><code class=\"language-vim\">CTRL-&lt;hjkl&gt; (movement keys)\n&lt;LEADER&gt;-&lt;hjkl&gt;\n</code></pre>\n<p>Open a split with a specific file</p>\n<pre><code class=\"language-vim\">:sp filename\n:vsp filename\n</code></pre>\n<h2 id=\"scratch-space\">Scratch space</h2>\n<ul>\n<li>courtesy of <a href=\"https://github.com/mtth/scratch.vim\">https://github.com/mtth/scratch.vim</a> plugin</li>\n<li><code>gs</code> in normal mode opens the scratch window and enters insert mode. The scratch window closes when you leave insert mode.\n= can also use <code>:Scratch</code></li>\n</ul>\n<h2 id=\"uppercase-a-word\">Uppercase a word</h2>\n<pre><code class=\"language-vim\">gUiw\n</code></pre>\n<h2 id=\"sort-lines\">Sort lines</h2>\n<p>Highlight the lines you want to sort, and then execute <code>:sort</code></p>\n<h2 id=\"format-text\">Format text</h2>\n<p>Vim lets you run any command line tool on a buffer/ selection of text via the following format, where <code>range</code> is the selection of text, and <code>filter</code> is the command to run. The output of the command, when fed the filter, replaces the selection:</p>\n<pre><code class=\"language-vim\">:{range}!{filter}\n</code></pre>\n<h3 id=\"json-formatting\">JSON formatting</h3>\n<p>Requires that the <code>jq</code> command is installed. <code>%</code> references the current buffer.</p>\n<pre><code class=\"language-vim\">%!jq\n</code></pre>\n<h2 id=\"execute-command-on-range\">Execute command on range</h2>\n<ul>\n<li>The <code>:</code> key puts you into command line mode</li>\n<li>You can then specify a range, such as <code>%</code>, which represents the entire file (alternatively, use visual mode to select the range you want and then enter command mode)</li>\n<li><code>norm</code> or <code>normal</code> tell the command line to run the rest of the sequence in normal mode</li>\n<li>A command such as <code>$x</code> (or any other normal mode incantation) can be used, and will execute over the entire selection</li>\n</ul>\n<p>So, for example, to delete the last character of every line in the buffer, run:</p>\n<pre><code>:%normal $x\n</code></pre>\n<h2 id=\"execute-command-on-multiple-lines\">Execute command on multiple lines</h2>\n<p>The <code>g</code> command is the \"global\" command to execute other commands. In this case, you can use it with the <code>norm</code> command to perform a change on lines that match a specific pattern (or all lines).</p>\n<p>For example, if you want to add a semicolon to the end of all lines that start with a number, you could do that as follows:</p>\n<pre><code class=\"language-vim\">:g/^\\d/norm A;\n</code></pre>\n<p>In this case, instead of substituting the line for something else, you are telling Vim to execute the \"normal mode\" command of moving to the end of the line and entering insert mode (with <code>A</code>), and then adding a semicolon.</p>\n<p>This is pretty powerful because you have the ability to perform a motion on all the lines matching a specific pattern.</p>\n<h2 id=\"visual-select-and-insert\">Visual select and insert</h2>\n<pre><code class=\"language-vim\">CTRL-v\n</code></pre>\n<p>Once you have selected the block you want, you can edit all of the selected lines at once with:</p>\n<pre><code class=\"language-vim\">SHIFT-i (insert whatever you want) &lt;ESC&gt;\n</code></pre>\n"}