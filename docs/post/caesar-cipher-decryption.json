{"date":"2015-07-11","rss":true,"template":"post.mustache","title":"Caesar Cipher Decryption","tags":["crypto","programming"],"description":"The ability to manipulate a computer to perform tedious tasks on your behalf is an incredibly valuable, and increasingly necessary skill to have. Lots of software engineering deals with large programs, and high level architectural challenges. This post explores the other side of programming... small, one-of scripts designed to solve a specific problem. I'll walk through how I solved a small cryptographic puzzle posed online, and try to explain the process of problem solving via code at a micro-level.","CORK_url":"post/caesar-cipher-decryption.html","CORK_reading_time":9,"CORK_lix_readability_score":30,"CORK_ari_readability_score":8,"content":"<p>Recently, Google ran a <a href=\"https://plus.google.com/+GoogleforWork/posts/cftsomhu6H4\">contest</a>\nto promote their new <a href=\"http://googleonlinesecurity.blogspot.com/2014/10/strengthening-2-step-verification-with.html\">Security Key</a>.\nThe contest had 5 parts, each of which was a simple <a href=\"https://en.wikipedia.org/wiki/Cryptography\">cryptography</a>\nchallenge. They provided an encrypted message, and the first\n100 people to submit the decrypted version of the message\nreceived a security key for free. The puzzles provided an easy,\napproachable example of the benefits of knowing how to program.\nNone of the puzzles were terribly difficult, and all could be\ndone manually in one fashion or another, but with a little\nscripting knowledge, you could explain the puzzle to a computer,\nand have it do most of the tedious work for you.</p>\n<p>As an example, take puzzle #3:</p>\n<p><img src=\"/static/posts/google-security-key-challenge-3.png\" alt=\"Google Security Key Challenge #3\" /></p>\n<p>Accompanying this puzzle is the hint &quot;Caesar&quot;. At first, this text\nlooks like gibberish, but we know it is in fact\n<a href=\"https://en.wikipedia.org/wiki/Ciphertext\">ciphertext</a>. Armed\nwith our hint, we can begin trying to decode it.</p>\n<h3 id=\"thinking-it-through\">Thinking it Through</h3>\n<p>With a little research, we come across something called the\n<a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\">Caesar cipher</a>.\nA <a href=\"https://en.wikipedia.org/wiki/Cipher\">cipher</a> is just a set\nof instructions for how to encrypt/ decrypt data, and this\nparticular one is what is known as a\n<a href=\"https://en.wikipedia.org/wiki/Substitution_cipher\">substitution cipher</a>.\nWikipedia does a good job explaining how it works:</p>\n<blockquote>\n<p>A Caesar cipher, also known as Caesar's cipher, the shift cipher,\nCaesar's code or Caesar shift, is one of the simplest and most widely\nknown encryption techniques. It is a type of substitution cipher in\nwhich each letter in the plaintext is replaced by a letter some fixed\nnumber of positions down the alphabet.</p>\n</blockquote>\n<p>So, to perform encryption via a caesar cipher, you pick a\nnumber (<code>N</code>) and a direction (<code>D</code>), and shift each letter in\nyour input text by that many letters in the chosen direction.\nIn the example pictured below, the number is 3 (<code>N = 3</code>), and\nthe direction is Left (<code>D = &lt;-</code>), causing the input letter <code>E</code>\nto be encrypted to the letter <code>B</code>. Notice also how the shifting\n&quot;wraps around&quot;.</p>\n<p><img src=\"/static/posts/caesar-cipher.png\" alt=\"Caesar Cipher Example\" /></p>\n<p>This cipher seems like a pretty good candidate to decrypt our\nciphertext. Now, we just have to figure out what <code>N</code> and <code>D</code> are! First,\na few things to note. The ciphertext includes punctuation, which we are\ngoing to assume is ignored by the cipher. It also includes both upper\nand lower case letters, but we'll assume that the cipher is\ncase-insensitive. Finally, while the caesar cipher is defined in\nterms of <code>N</code> and <code>D</code>, since the shifts &quot;wrap around&quot; (if you\nhave to shift past the last letter, you wrap around to the first\none), any <code>(N,D)</code> pair has an equivalent pair with it's\ndirection reversed.</p>\n<p>More formally, for a given alphabet with <code>M</code> letters, a caesar\ncipher defined by <code>(N = n, D = d)</code> is equivalent to the caesar\ncipher defined by <code>(N = M - n, D = -d)</code>, keeping in mind that\nfor any <code>N</code>, <code>N == N % M</code>. If this is still unclear, I've found\ndrawing out a picture of equivalent ciphers with their directions\nswapped to be illustrative.</p>\n<p>Knowing that means we can drop <code>D</code> from our list of unknowns,\nsince there exists a correct value for <code>N</code> regardless of the\nvalue of <code>D</code>! Furthermore, since we are dealing with the\n<a href=\"https://en.wikipedia.org/wiki/English_alphabet\">english alphabet</a> for\nthis particular puzzle, we know that there are only 26 possible\nvalues for <code>N</code>. This is called the <a href=\"https://en.wikipedia.org/wiki/Key_space_(cryptography)\">key space</a>,\nand all we have to do is try each key before 100 other people do,\nto find the answer and win a prize! Unfortunately, doing that\nmanually is rather tedious. Now that we know how to solve the\nproblem, we need to write a script so that a computer can do\nthe boring part.</p>\n<h3 id=\"scripting-and-decrypting\">Scripting and Decrypting</h3>\n<p>My current scripting language of choice is\n<a href=\"https://www.python.org/\">Python</a>, so I'll use that, but\nthe general concepts are the same regardless of language.</p>\n<p>Lets start with the alphabet:</p>\n<pre><code class=\"language-python\">ALPHABET = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n</code></pre>\n<p>Now, we need some way to represent the caesar cipher. We know\nfrom earlier that the only initialization parameter the cipher\nneeds is <code>N</code>, and that it should take in a letter, and spit out\nthe encrypted form of that letter. We can represent the cipher\nas a <a href=\"https://en.wikipedia.org/wiki/Hash_table\">hash map</a>, and\nwrite a function that creates the cipher for a given value for <code>N</code>:</p>\n<pre><code class=\"language-python\">KEY_SPACE = len(ALPHABET)\n\ndef create_caesar_cipher(N):\n  # we use the mod operator here to perform the wrap-around mentioned above\n  cipher = {ALPHABET[i]: ALPHABET[(i+N) % KEY_SPACE] for i, _ in enumerate(ALPHABET)}\n  return cipher\n</code></pre>\n<p>With this function to generate a cipher, we can now write a\ndecryption function that takes in ciphertext, runs it through\na given cipher, and outputs the decrypted text.</p>\n<pre><code class=\"language-python\">from string import punctuation\n\ndef decrypt(cipher, ciphertext):\n  # remember we need to ignore letter case and punctuation\n  decrypted = [letter if letter in punctuation + &quot; &quot; else cipher[letter] for letter in ciphertext.lower()]\n  return &quot;&quot;.join(decrypted)\n</code></pre>\n<p>With those pieces in place, lets try to crack the code with\n<a href=\"https://en.wikipedia.org/wiki/Brute-force_attack\">brute force</a>,\naka trying every possible combination. This is the same approach\nwe were going to take if we did it manually, but it makes sense\nnow because of how small this cipher's\n<a href=\"https://en.wikipedia.org/wiki/Key_space_(cryptography)\">key space</a>\nis relative to the speed of our computer. (Remember that the key\nspace in this case is the amount of possible values for <code>N</code>,\nwhich we determined earlier was 26).</p>\n<p>The brute force approach can be accomplished like this:</p>\n<pre><code class=\"language-python\">CIPHER_TEXT = &quot;Wuhdw brxu sdvvzrug olnh brxu wrrwkeuxvk. Grq'w ohw dqbergb hovh xvh lw, dqg jhw d qhz rqh hyhub vla prqwkv. Foliirug Vwroo&quot;\n\nfor n in range(KEY_SPACE):\n  cipher = create_caesar_cipher(n)\n  plaintext = decrypt(cipher, CIPHER_TEXT)\n  print(&quot;{}:\\t{}&quot;.format(n, plaintext))\n</code></pre>\n<p>After running that code, all that's left to do is read through each of\nthe <a href=\"https://en.wikipedia.org/wiki/Plaintext\">plaintext</a> entries,\nand find the one that makes sense. Here's the output I get... can\nyou spot the correctly decrypted value?</p>\n<pre><code class=\"language-text\">0:\twuhdw brxu sdvvzrug olnh brxu wrrwkeuxvk. grq'w ohw dqbergb hovh xvh lw, dqg jhw d qhz rqh hyhub vla prqwkv. foliirug vwroo\n1:\txviex csyv tewwasvh pmoi csyv xssxlfvywl. hsr'x pix ercfshc ipwi ywi mx, erh kix e ria sri izivc wmb qsrxlw. gpmjjsvh wxspp\n2:\tywjfy dtzw ufxxbtwi qnpj dtzw yttymgwzxm. its'y qjy fsdgtid jqxj zxj ny, fsi ljy f sjb tsj jajwd xnc rtsymx. hqnkktwi xytqq\n3:\tzxkgz euax vgyycuxj roqk euax zuuznhxayn. jut'z rkz gtehuje kryk ayk oz, gtj mkz g tkc utk kbkxe yod sutzny. irolluxj yzurr\n4:\taylha fvby whzzdvyk sprl fvby avvaoiybzo. kvu'a sla hufivkf lszl bzl pa, huk nla h uld vul lclyf zpe tvuaoz. jspmmvyk zavss\n5:\tbzmib gwcz xiaaewzl tqsm gwcz bwwbpjzcap. lwv'b tmb ivgjwlg mtam cam qb, ivl omb i vme wvm mdmzg aqf uwvbpa. ktqnnwzl abwtt\n6:\tcanjc hxda yjbbfxam urtn hxda cxxcqkadbq. mxw'c unc jwhkxmh nubn dbn rc, jwm pnc j wnf xwn nenah brg vxwcqb. lurooxam bcxuu\n7:\tdbokd iyeb zkccgybn vsuo iyeb dyydrlbecr. nyx'd vod kxilyni ovco eco sd, kxn qod k xog yxo ofobi csh wyxdrc. mvsppybn cdyvv\n8:\tecple jzfc alddhzco wtvp jzfc ezzesmcfds. ozy'e wpe lyjmzoj pwdp fdp te, lyo rpe l yph zyp pgpcj dti xzyesd. nwtqqzco dezww\n9:\tfdqmf kagd bmeeiadp xuwq kagd faaftndget. paz'f xqf mzknapk qxeq geq uf, mzp sqf m zqi azq qhqdk euj yazfte. oxurradp efaxx\n10:\tgerng lbhe cnffjbeq yvxr lbhe gbbguoehfu. qba'g yrg nalobql ryfr hfr vg, naq trg n arj bar rirel fvk zbaguf. pyvssbeq fgbyy\n11:\thfsoh mcif doggkcfr zwys mcif hcchvpfigv. rcb'h zsh obmpcrm szgs igs wh, obr ush o bsk cbs sjsfm gwl acbhvg. qzwttcfr ghczz\n12:\tigtpi ndjg ephhldgs axzt ndjg iddiwqgjhw. sdc'i ati pcnqdsn taht jht xi, pcs vti p ctl dct tktgn hxm bdciwh. raxuudgs hidaa\n13:\tjhuqj oekh fqiimeht byau oekh jeejxrhkix. ted'j buj qdoreto ubiu kiu yj, qdt wuj q dum edu uluho iyn cedjxi. sbyvveht ijebb\n14:\tkivrk pfli grjjnfiu czbv pfli kffkysiljy. ufe'k cvk repsfup vcjv ljv zk, reu xvk r evn fev vmvip jzo dfekyj. tczwwfiu jkfcc\n15:\tljwsl qgmj hskkogjv dacw qgmj lgglztjmkz. vgf'l dwl sfqtgvq wdkw mkw al, sfv ywl s fwo gfw wnwjq kap egflzk. udaxxgjv klgdd\n16:\tmkxtm rhnk itllphkw ebdx rhnk mhhmauknla. whg'm exm tgruhwr xelx nlx bm, tgw zxm t gxp hgx xoxkr lbq fhgmal. vebyyhkw lmhee\n17:\tnlyun siol jummqilx fcey siol niinbvlomb. xih'n fyn uhsvixs yfmy omy cn, uhx ayn u hyq ihy ypyls mcr gihnbm. wfczzilx mniff\n18:\tomzvo tjpm kvnnrjmy gdfz tjpm ojjocwmpnc. yji'o gzo vitwjyt zgnz pnz do, viy bzo v izr jiz zqzmt nds hjiocn. xgdaajmy nojgg\n19:\tpnawp ukqn lwoosknz hega ukqn pkkpdxnqod. zkj'p hap wjuxkzu ahoa qoa ep, wjz cap w jas kja aranu oet ikjpdo. yhebbknz opkhh\n20:\tqobxq vlro mxpptloa ifhb vlro qllqeyorpe. alk'q ibq xkvylav bipb rpb fq, xka dbq x kbt lkb bsbov pfu jlkqep. zifccloa pqlii\n21:\trpcyr wmsp nyqqumpb jgic wmsp rmmrfzpsqf. bml'r jcr ylwzmbw cjqc sqc gr, ylb ecr y lcu mlc ctcpw qgv kmlrfq. ajgddmpb qrmjj\n22:\tsqdzs xntq ozrrvnqc khjd xntq snnsgaqtrg. cnm's kds zmxancx dkrd trd hs, zmc fds z mdv nmd dudqx rhw lnmsgr. bkheenqc rsnkk\n23:\ttreat your password like your toothbrush. don't let anybody else use it, and get a new one every six months. clifford stoll\n24:\tusfbu zpvs qbttxpse mjlf zpvs uppuicsvti. epo'u mfu bozcpez fmtf vtf ju, boe hfu b ofx pof fwfsz tjy npouit. dmjggpse tupmm\n25:\tvtgcv aqwt rcuuyqtf nkmg aqwt vqqvjdtwuj. fqp'v ngv cpadqfa gnug wug kv, cpf igv c pgy qpg gxgta ukz oqpvju. enkhhqtf uvqnn\n</code></pre>\n<h3 id=\"closing-thoughts\">Closing Thoughts</h3>\n<p>Writing software is fundamentally about teaching computers to\nsolve problems for you, and this cryptography challenge is a\nquintessential example of how useful a little knowledge of\nprogramming can be. We took a &quot;real world&quot; problem, came up with\nan approach to solve it, and implemented that approach in a few\nlines of code. Obviously the cryptographic methods used\nin this case are toy examples, and the solution is fairly\ntrivial, but the underlying techniques are useful nonetheless.</p>\n<p>The source code to accompany this post can be found in its entirety\n<a href=\"https://gist.github.com/jasonrdsouza/a3f2657822f98ef48587\">here</a>.</p>\n"}