{"title":"Homelab Server Security","tags":["homelab","caddy"],"date":"2020-01-14","template":"post.mustache","CORK_url":"post/homelab-security.html","CORK_reading_time":3,"content":"<h2 id=\"background\">Background</h2>\n<p>After <a href=\"/homelab-server\">setting up my homelab server</a>, I immediately got worried about the security of having a computer with private/ personal data on it open to the internet. That sent me down a rabbit hole of best practices and considerations, the result of which I've written up here. Hopefully it's helpful for other people hoping to self host.</p>\n<h2 id=\"updates\">Updates</h2>\n<ul>\n<li>os updates</li>\n<li>software updates (through package manager, or other means)\n<ul>\n<li>slightly less important if you front the service with an auth portal served by your reverse proxy</li>\n<li>but this makes it essential that you keep the reverse proxy up to date</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ssh-security\">SSH Security</h2>\n<ul>\n<li>disable password login (only use public key)</li>\n<li>other stuff to disable</li>\n<li>fail2ban mention</li>\n<li>creating system users that don't have shell/ login ability?</li>\n<li>if a shared system, only whitelist specific user accounts</li>\n</ul>\n<h2 id=\"tls-everywhere\">TLS Everywhere</h2>\n<ul>\n<li>Caddy makes this super easy, but even with Nginx and Certbot, it's very automated/ easy... no excuse to be serving unencrypted traffic</li>\n</ul>\n<h2 id=\"service-auth\">Service Auth</h2>\n<ul>\n<li>Gate everything behind an auth screen served by your reverse proxy\n<ul>\n<li>this secures your private data while allowing you to centralize the user accounts</li>\n<li>also adds additional protection just in case one of the services you're running does have a vulnerability</li>\n</ul>\n</li>\n<li>Discussion of basic auth and how it's good enough if you ensure TLS</li>\n<li>SSO as future work?</li>\n</ul>\n<h2 id=\"log-retention\">Log Retention</h2>\n<p>For reverse proxy (caddy example), and running services like sshd.</p>\n<h2 id=\"sshd-log-analysis-raw-notes\">SSHd Log Analysis Raw Notes</h2>\n<p>sshd logs located in /var/log/auth.log (rotation enabled by default, so might need to decompress and concatenate files together depending on desired analysis time range)</p>\n<p>Once you have the file, you can use simple UNIX commands to glean insights</p>\n<p>Analysis date range:</p>\n<pre><code class=\"language-bash\">cat auth.log | cut -c 1-6 | sort | uniq\n</code></pre>\n<p>Successful login attempts:</p>\n<pre><code class=\"language-bash\">cat auth.log | grep 'sshd' | grep 'session opened' | wc -l\n</code></pre>\n<p>Unique successful login usernames:</p>\n<pre><code class=\"language-bash\">cat auth.log | grep sshd | grep 'session opened' | awk '{ print $11 }' | sort | uniq\n</code></pre>\n<p>Unique IP addresses that successfully logged in:</p>\n<pre><code class=\"language-bash\">cat auth.log | grep 'sshd' | grep '.*Accepted publickey.*' | awk '{ print $11 }' | sort | uniq\n</code></pre>\n<p>Failed login attempts:</p>\n<pre><code class=\"language-bash\">cat auth.log | grep 'sshd' | grep 'Invalid user' | wc -l\n</code></pre>\n<p>Failed login users (grouped and sorted by attempts):</p>\n<pre><code class=\"language-bash\">cat auth.log | grep 'sshd' | grep 'Invalid user' | awk '{ print $8 }' | sort | uniq -c | sort -r\n</code></pre>\n<p>Failed login IPs grouped and sorted by attempts:</p>\n<pre><code class=\"language-bash\">cat auth.log | grep 'sshd' | grep 'Invalid user' | awk '{ print $10 }' | sort | uniq -c | sort -r\n</code></pre>\n"}